# generated by fastapi-codegen:
#   filename:  openapi.json

from __future__ import annotations

from fastapi import APIRouter

from models import (
    ErrorResponse,
    Item,
    ListNamespaceResponse,
    Namespace,
    Optional,
    SearchItemsResponse,
    StoreDeleteRequest,
    StoreListNamespacesRequest,
    StorePutRequest,
    StoreSearchRequest,
    Union,
)

router = APIRouter(tags=["Store"])


@router.put(
    "/store/items",
    response_model=None,
    responses={"422": {"model": ErrorResponse}},
    tags=["Store"],
)
def put_item(body: StorePutRequest) -> Optional[ErrorResponse]:
    """
    Store or update an item.
    """
    pass


@router.delete(
    "/store/items",
    response_model=None,
    responses={"422": {"model": ErrorResponse}},
    tags=["Store"],
)
def delete_item(body: StoreDeleteRequest) -> Optional[ErrorResponse]:
    """
    Delete an item.
    """
    pass


@router.get(
    "/store/items",
    response_model=Item,
    responses={"400": {"model": ErrorResponse}, "422": {"model": ErrorResponse}},
    tags=["Store"],
)
def get_item(
    key: str, namespace: Optional[Namespace] = None
) -> Union[Item, ErrorResponse]:
    """
    Retrieve a single item.
    """
    pass


@router.post(
    "/store/items/search",
    response_model=SearchItemsResponse,
    responses={"422": {"model": ErrorResponse}},
    tags=["Store"],
)
def search_items(body: StoreSearchRequest) -> Union[SearchItemsResponse, ErrorResponse]:
    """
    Search for items within a namespace prefix.
    """
    pass


@router.post(
    "/store/namespaces",
    response_model=ListNamespaceResponse,
    responses={"422": {"model": ErrorResponse}},
    tags=["Store"],
)
def list_namespaces(
    body: StoreListNamespacesRequest,
) -> Union[ListNamespaceResponse, ErrorResponse]:
    """
    List namespaces with optional match conditions.
    """
    pass
